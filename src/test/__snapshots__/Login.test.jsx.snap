// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login should render Login 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Logo />,
        <form
          onSubmit={[Function]}
        >
          <FormInput
            handleChange={[Function]}
            name="email"
            placeholder="Enter your email"
            title="Email"
            type="email"
            value=""
          />
          <FormInput
            handleChange={[Function]}
            name="password"
            placeholder="Enter your password"
            title="Password"
            type="password"
            value=""
          />
          <div
            className="form-submit"
          >
            <input
              type="submit"
              value="Log in"
            />
          </div>
        </form>,
        <div
          className="to-sign-up"
        >
          <p>
            OR
          </p>
          <Link
            replace={false}
            to="/signup"
          >
            Sign up
          </Link>
        </div>,
      ],
      "className": "page centered",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <FormInput
              handleChange={[Function]}
              name="email"
              placeholder="Enter your email"
              title="Email"
              type="email"
              value=""
            />,
            <FormInput
              handleChange={[Function]}
              name="password"
              placeholder="Enter your password"
              title="Password"
              type="password"
              value=""
            />,
            <div
              className="form-submit"
            >
              <input
                type="submit"
                value="Log in"
              />
            </div>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "handleChange": [Function],
              "name": "email",
              "placeholder": "Enter your email",
              "title": "Email",
              "type": "email",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "handleChange": [Function],
              "name": "password",
              "placeholder": "Enter your password",
              "title": "Password",
              "type": "password",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <input
                type="submit"
                value="Log in"
              />,
              "className": "form-submit",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "type": "submit",
                "value": "Log in",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            "type": "div",
          },
        ],
        "type": "form",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p>
              OR
            </p>,
            <Link
              replace={false}
              to="/signup"
            >
              Sign up
            </Link>,
          ],
          "className": "to-sign-up",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "OR",
            },
            "ref": null,
            "rendered": "OR",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Sign up",
              "replace": false,
              "to": "/signup",
            },
            "ref": null,
            "rendered": "Sign up",
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Logo />,
          <form
            onSubmit={[Function]}
          >
            <FormInput
              handleChange={[Function]}
              name="email"
              placeholder="Enter your email"
              title="Email"
              type="email"
              value=""
            />
            <FormInput
              handleChange={[Function]}
              name="password"
              placeholder="Enter your password"
              title="Password"
              type="password"
              value=""
            />
            <div
              className="form-submit"
            >
              <input
                type="submit"
                value="Log in"
              />
            </div>
          </form>,
          <div
            className="to-sign-up"
          >
            <p>
              OR
            </p>
            <Link
              replace={false}
              to="/signup"
            >
              Sign up
            </Link>
          </div>,
        ],
        "className": "page centered",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <FormInput
                handleChange={[Function]}
                name="email"
                placeholder="Enter your email"
                title="Email"
                type="email"
                value=""
              />,
              <FormInput
                handleChange={[Function]}
                name="password"
                placeholder="Enter your password"
                title="Password"
                type="password"
                value=""
              />,
              <div
                className="form-submit"
              >
                <input
                  type="submit"
                  value="Log in"
                />
              </div>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "handleChange": [Function],
                "name": "email",
                "placeholder": "Enter your email",
                "title": "Email",
                "type": "email",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "handleChange": [Function],
                "name": "password",
                "placeholder": "Enter your password",
                "title": "Password",
                "type": "password",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <input
                  type="submit"
                  value="Log in"
                />,
                "className": "form-submit",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                  "value": "Log in",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              "type": "div",
            },
          ],
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p>
                OR
              </p>,
              <Link
                replace={false}
                to="/signup"
              >
                Sign up
              </Link>,
            ],
            "className": "to-sign-up",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "OR",
              },
              "ref": null,
              "rendered": "OR",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Sign up",
                "replace": false,
                "to": "/signup",
              },
              "ref": null,
              "rendered": "Sign up",
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "context": Object {
      "updateUser": [MockFunction],
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
